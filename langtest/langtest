#!/usr/bin/env python

import click

import glob
import os
import subprocess


#=============================================================================
# Logic
#=============================================================================
def get_langtest_dir():
    """Returns the fullt directory path of langtest."""
    return os.path.dirname(os.path.realpath(__file__))


def get_all_test_names(test_dir):
    """Returns a list of all test names."""
    return_value = set()
    for filename in glob.glob(os.path.join(test_dir, "*")):
        # Clean name
        filename = filename.replace(test_dir, "")
        filename = filename.replace("\\", "")
        filename = filename.replace("/", "")
        filename = filename.replace(".sy", "")
        filename = filename.replace(".case", "")
        filename = filename.replace(".desc", "")
        return_value.add(filename)
    return return_value


def run_test(test_dir, test_name: str, input_command: str) -> bool:
    """Run a test and return whether it passed."""
    test_filename = os.path.join(test_dir, f"{test_name}.sy")
    case_filename = os.path.join(test_dir, f"{test_name}.case")
    process = input_command.split(" ")
    process.append(test_filename)
    test_output = subprocess.run(process, capture_output=True)
    with open(case_filename, 'r') as f:
        return str.encode(f.read()) == test_output.stdout


#=============================================================================
# Click
#=============================================================================
@click.command(help="Run all language tests.")
@click.help_option("--help", "-h")
@click.option("-c", "--command")
def run_all_tests(command: str):
    langpath_dir = get_langtest_dir()
    test_dir = os.path.join(langpath_dir, "tests")
    test_names = get_all_test_names(test_dir)
    num_fails = 0
    for test in test_names:
        print("-"*30)
        print(f"Running test `{test}`... ")
        # print desc
        try:
            with open(os.path.join(test_dir, f"{test}.desc")) as f:
                print(f.read())
        except:
            # No desc file
            pass
        # Run Test
        passed = run_test(test_dir, test, command)
        if not passed:
            num_fails += 1
        print("OK" if passed else "Failed")
    # Print summary
    print("-"*30)
    print(f"{num_fails} Failure(s)")



#=============================================================================
# Main
#=============================================================================
if __name__ == "__main__":
    run_all_tests()
