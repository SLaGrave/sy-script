{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Sy scripting language A small, incredibly useless language. _____ _ _ / ____| (_) | | | (___ _ _ ___ ___ _ __ _ _ __ | |_ \\___ \\| | | / __|/ __| '__| | '_ \\| __| ____) | |_| \\__ \\ (__| | | | |_) | |_ |_____/ \\__, |___/\\___|_| |_| .__/ \\__| __/ | | | |___/ |_| How Write a script and call it with syscript.py. A tutorial on the whole \"write a script\" step can be found here . $ python syscript ./hello.sy Why I'm interested in writing programming languages. A coworking and I have frequently joked about using an abnormal or esoteric language for a project, so this is my attempt at writing a language to fit that description. I liked the wiki article for OISCs .","title":"The Sy scripting language"},{"location":"#the-sy-scripting-language","text":"A small, incredibly useless language. _____ _ _ / ____| (_) | | | (___ _ _ ___ ___ _ __ _ _ __ | |_ \\___ \\| | | / __|/ __| '__| | '_ \\| __| ____) | |_| \\__ \\ (__| | | | |_) | |_ |_____/ \\__, |___/\\___|_| |_| .__/ \\__| __/ | | | |___/ |_|","title":"The Sy scripting language"},{"location":"#how","text":"Write a script and call it with syscript.py. A tutorial on the whole \"write a script\" step can be found here . $ python syscript ./hello.sy","title":"How"},{"location":"#why","text":"I'm interested in writing programming languages. A coworking and I have frequently joked about using an abnormal or esoteric language for a project, so this is my attempt at writing a language to fit that description. I liked the wiki article for OISCs .","title":"Why"},{"location":"license/","text":"MIT License Copyright (c) 2021 Sam LaGrave Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright (c) 2021 Sam LaGrave Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"style/","text":"Styling your Sy script LMAO you wanna style this garbage? Okay... File should have the sy type -- test.sy If one of the first two arguments to a sy command is 0, it should be the second one Good: sy 12 0 _ _; Bad: sy 0 12 _ _; Variables should use lowerCamelCase naming schemes Branch locations/leafs should use UpperCamelCase naming schemes Printing a string should be its own leaf One newline between the end of a leaf and the leaf command of the next one.","title":"Style Sy"},{"location":"style/#styling-your-sy-script","text":"LMAO you wanna style this garbage? Okay... File should have the sy type -- test.sy If one of the first two arguments to a sy command is 0, it should be the second one Good: sy 12 0 _ _; Bad: sy 0 12 _ _; Variables should use lowerCamelCase naming schemes Branch locations/leafs should use UpperCamelCase naming schemes Printing a string should be its own leaf One newline between the end of a leaf and the leaf command of the next one.","title":"Styling your Sy script"},{"location":"write/","text":"Write Sy Overview Syntax There are only two commands in syscript: the sy operator and the leaf operator. The sy operator requires four position arguments. The sy operator subtracts the second argument from the first, stores the difference in a variable (the third argument), and branches to a different location in the code (the fourth arguments) if the sum is less than or equal to 0. One, both, or none of the third and fourth arguments can be an underscore, meaning ignore this argument . The leaf defines the starting point of a branch that can be reached from the sy command. Because this language is terrible, comments are contained within chevrons -- <<Some comment...>> . Also lines have to end in a semicolon ( ; ) (not comment lines though). All words / symbols Word/Symbol Usage Meaning/Use sy sy op1 op2 op3 op4; Subtract op2 from op1, store difference in op3, jump to op4 leaf leaf op1; Define starting point of a branch location named op1 _ sy op1 op2 _ op4; If op4 is present, op3 must have something there (vice versa with op4). The underscore means \"nothing\" stdin sy stdin op2 op3 op4; Gets a number from the stdin stdout sy op1 op2 stout op4; Prints ascii encoded symbol to stdout Write Open a file, write some commands, and then run it using syscript.py . The following script prints \"Hello, World!\\n\" three times. It does so using the following steps: Set variable counter to 3 Print \"Hello, World!\\n\" This is done by not subtracting anything, and saving it to stdout Subtract 1 from counter , branching to End if less than or equal to 0 If not, return to PrintHelloWorld (step 2) leaf ControlVariables; sy 3 0 counter _; <<Test comment>> leaf PrintHelloWorld; sy 72 0 stdout _; sy 101 0 stdout _; sy 108 0 stdout _; sy 108 0 stdout _; sy 111 0 stdout _; sy 44 0 stdout _; sy 32 0 stdout _; sy 119 0 stdout _; sy 111 0 stdout _; sy 114 0 stdout _; sy 108 0 stdout _; sy 100 0 stdout _; sy 33 0 stdout _; sy 10 0 stdout _; leaf CounterChange; sy counter 1 counter End; sy 0 0 _ PrintHelloWorld; leaf End;","title":"Write Sy"},{"location":"write/#write-sy","text":"","title":"Write Sy"},{"location":"write/#overview","text":"","title":"Overview"},{"location":"write/#syntax","text":"There are only two commands in syscript: the sy operator and the leaf operator. The sy operator requires four position arguments. The sy operator subtracts the second argument from the first, stores the difference in a variable (the third argument), and branches to a different location in the code (the fourth arguments) if the sum is less than or equal to 0. One, both, or none of the third and fourth arguments can be an underscore, meaning ignore this argument . The leaf defines the starting point of a branch that can be reached from the sy command. Because this language is terrible, comments are contained within chevrons -- <<Some comment...>> . Also lines have to end in a semicolon ( ; ) (not comment lines though).","title":"Syntax"},{"location":"write/#all-words-symbols","text":"Word/Symbol Usage Meaning/Use sy sy op1 op2 op3 op4; Subtract op2 from op1, store difference in op3, jump to op4 leaf leaf op1; Define starting point of a branch location named op1 _ sy op1 op2 _ op4; If op4 is present, op3 must have something there (vice versa with op4). The underscore means \"nothing\" stdin sy stdin op2 op3 op4; Gets a number from the stdin stdout sy op1 op2 stout op4; Prints ascii encoded symbol to stdout","title":"All words / symbols"},{"location":"write/#write","text":"Open a file, write some commands, and then run it using syscript.py . The following script prints \"Hello, World!\\n\" three times. It does so using the following steps: Set variable counter to 3 Print \"Hello, World!\\n\" This is done by not subtracting anything, and saving it to stdout Subtract 1 from counter , branching to End if less than or equal to 0 If not, return to PrintHelloWorld (step 2) leaf ControlVariables; sy 3 0 counter _; <<Test comment>> leaf PrintHelloWorld; sy 72 0 stdout _; sy 101 0 stdout _; sy 108 0 stdout _; sy 108 0 stdout _; sy 111 0 stdout _; sy 44 0 stdout _; sy 32 0 stdout _; sy 119 0 stdout _; sy 111 0 stdout _; sy 114 0 stdout _; sy 108 0 stdout _; sy 100 0 stdout _; sy 33 0 stdout _; sy 10 0 stdout _; leaf CounterChange; sy counter 1 counter End; sy 0 0 _ PrintHelloWorld; leaf End;","title":"Write"}]}