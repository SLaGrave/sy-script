{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Syscript: A small language for insane people","text":"<pre><code>   _____                     _       _   \n  / ____|                   (_)     | |  \n | (___  _   _ ___  ___ _ __ _ _ __ | |_ \n  \\___ \\| | | / __|/ __| '__| | '_ \\| __|\n  ____) | |_| \\__ \\ (__| |  | | |_) | |_ \n |_____/ \\__, |___/\\___|_|  |_| .__/ \\__|\n          __/ |               | |        \n         |___/                |_|        \n</code></pre>"},{"location":"#sy-is-back-in-development","title":"Sy is back in development","text":"<p>Development is underway on the next iteration on the Syscript concept! The <code>sisy</code> interpreter will soon become the standard implementation - this version will be a compiled program written in Rust which interprets sy files. Compared to the current Python implementation, it will be much faster. Because Python itself is interpreted, the sy code is basically interpreted twice, making it very slow. This new implementation is only Singly Interpreted (the name <code>sisy</code> itself means singly interpreted sy).</p>"},{"location":"#why","title":"Why","text":"<ul> <li> <p>I'm interested in writing programming languages.</p> </li> <li> <p>A coworker and I have frequently joked about using an abnormal or esoteric language for a project, so this is my attempt at writing a language to fit that description.</p> </li> <li> <p>I liked the wiki article for OISCs.</p> </li> </ul>"},{"location":"license/","title":"MIT License","text":"<p>Copyright (c) 2021-2024 Sam LaGrave</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"rust_impl/","title":"<code>sisy</code>: the Rust implementation","text":"<p>More to come soon.</p>"},{"location":"style/","title":"Styling your Sy script","text":"<p>LMAO you wanna style this garbage?</p> <p>Okay...</p> <ul> <li>File should have the sy type -- <code>test.sy</code></li> <li>If one of the first two arguments to a <code>sy</code> command is 0, it should be the second one<ul> <li>Good: <code>sy 12 0 _ _;</code></li> <li>Bad: <code>sy 0 12 _ _;</code></li> </ul> </li> <li>Variables should use lowerCamelCase naming schemes</li> <li>Branch locations/leafs should use UpperCamelCase naming schemes</li> <li>Printing a string should be its own leaf</li> <li>One newline between the end of a leaf and the <code>leaf</code> command of the next one.</li> </ul>"},{"location":"todo/","title":"Syscript (site) todo","text":"<ul> <li>[x] Clean up README</li> <li>[ ] Clean up write &amp; style pages</li> <li>[ ] Keep experimental up-to-date (ongoing...)</li> </ul>"},{"location":"write/","title":"Write Sy","text":""},{"location":"write/#overview","title":"Overview","text":""},{"location":"write/#syntax","title":"Syntax","text":"<p>There are only two commands in syscript: the <code>sy</code> operator and the <code>leaf</code> operator.</p> <p>The <code>sy</code> operator requires four position arguments. The <code>sy</code> operator subtracts the second argument from the first, stores the difference in a variable (the third argument), and branches to a different location in the code (the fourth arguments) if the sum is less than or equal to 0. One, both, or none of the third and fourth arguments can be an underscore, meaning ignore this argument.</p> <p>The <code>leaf</code> defines the starting point of a branch that can be reached from the sy command.</p> <p>Because this language is terrible, comments are contained within chevrons -- <code>&lt;&lt;Some comment...&gt;&gt;</code>. Also lines have to end in a semicolon (<code>;</code>) (not comment lines though).</p>"},{"location":"write/#all-words-symbols","title":"All words / symbols","text":"Word/Symbol Usage Meaning/Use sy sy op1 op2 op3 op4; Subtract op2 from op1, store difference in op3, jump to op4 leaf leaf op1; Define starting point of a branch location named op1 _ sy op1 op2 _ op4; Can be used in place of arg 3 or 4 -- means \"nothing\" stdin sy stdin op2 op3 op4; Gets a number from the stdin stdout sy op1 op2 stout op4; Prints ascii encoded symbol to stdout"},{"location":"write/#write","title":"Write","text":"<p>Open a file, write some commands, and then run it using <code>syscript.py</code>.</p> <p>The following script prints \"Hello, World!\\n\" three times. It does so using the following steps:</p> <ol> <li>Set variable <code>counter</code> to 3</li> <li>Print \"Hello, World!\\n\"<ul> <li>This is done by not subtracting anything, and saving it to <code>stdout</code></li> </ul> </li> <li>Subtract 1 from <code>counter</code>, branching to <code>End</code> if less than or equal to 0</li> <li>If not, return to PrintHelloWorld (step 2)</li> </ol> <pre><code>leaf ControlVariables;\nsy 3 0 counter _;\n\n&lt;&lt;Test comment&gt;&gt;\n\nleaf PrintHelloWorld;\nsy 72 0 stdout _;\nsy 101 0 stdout _;\nsy 108 0 stdout _;\nsy 108 0 stdout _;\nsy 111 0 stdout _;\nsy 44 0 stdout _;\nsy 32 0 stdout _;\nsy 119 0 stdout _;\nsy 111 0 stdout _;\nsy 114 0 stdout _;\nsy 108 0 stdout _;\nsy 100 0 stdout _;\nsy 33 0 stdout _;\nsy 10 0 stdout _;\n\nleaf CounterChange;\nsy counter 1 counter End;\nsy 0 0 _ PrintHelloWorld;\n\nleaf End;\n\n</code></pre>"}]}